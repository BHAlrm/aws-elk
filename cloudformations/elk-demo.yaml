AWSTemplateFormatVersion: "2010-09-09"
Description: My API Gateway and Lambda function

Parameters:
  apiGatewayName:
    Type: String
    Default: elk-demo
  apiGatewayStageName:
    Type: String
    AllowedPattern: "[a-z0-9]+"
    Default: staging
  apiGatewayHTTPMethod:
    Type: String
    Default: POST
  lambdaFunctionName:
    Type: String
    Default: helloworld

  esInstanceSize:
    Default: "t2.small.elasticsearch"
    Description: Instance size for Elasticsearch Instance.
    Type: String
    AllowedValues:
      - "t2.small.elasticsearch"
      - "t2.medium.elasticsearch"
      - "m3.large.elasticsearch"
      - "m3.xlarge.elasticsearch"
      - "m3.2xlarge.elasticsearch"

  LambdasS3Bucket:
    Description: An S3 Bucket containing the Lambda zipped deployment package. Must be in the region where the stack is launched.
    Type: String
    Default: "demo-elk-lambdas"
  HelloworldLambdaS3Key:
    Description: The path to zipped deployment package hello world api
    Type: String
    Default: "hello-world-api.zip"
  LogConsumeLambdaS3Key:
    Description: The path to zipped deployment package log consumer script
    Type: String
    Default: "log-consumer.zip"

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Elastic search configuration
        Parameters:
          - esInstanceSize
      - Label:
          default: S3 configuration
        Parameters:
          - LambdasS3Bucket
          - HelloworldLambdaS3Key
          - LogConsumeLambdaS3Key
      - Label:
          default: API Gateway configuration
        Parameters:
          - apiGatewayName
          - apiGatewayStageName
          - apiGatewayHTTPMethod
          - lambdaFunctionName

Resources:
  apiGateway:
    Type: AWS::ApiGateway::RestApi
    DependsOn:
      - serviceLambdaFunction
    Properties:
      Description: API Gateway
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: !Ref apiGatewayName

  apiGatewayRootMethod:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - apiGateway
    Properties:
      AuthorizationType: NONE
      HttpMethod: !Ref apiGatewayHTTPMethod
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt serviceLambdaFunction.Arn
      ResourceId: !GetAtt apiGateway.RootResourceId
      RestApiId: !Ref apiGateway

  apiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    Description: To deploys an API Gateway RestApi resource to a stage so that clients can call the API over the internet
    DependsOn:
      - apiGatewayRootMethod
    Properties:
      RestApiId: !Ref apiGateway
      StageName: !Ref apiGatewayStageName

  serviceLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdasS3Bucket
        S3Key: !Ref HelloworldLambdaS3Key
      Description: Service Lambda function
      FunctionName: !Ref lambdaFunctionName
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt serviceLambdaIAMRole.Arn
      Runtime: nodejs12.x

  serviceLambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt serviceLambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/*/${apiGatewayHTTPMethod}/

  serviceLambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${lambdaFunctionName}:*
          PolicyName: serviceLambda

  serviceLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${lambdaFunctionName}
      RetentionInDays: 90

  esDomain:
    Type: "AWS::Elasticsearch::Domain"
    Properties:
      ElasticsearchClusterConfig:
        DedicatedMasterEnabled: false
        InstanceCount: 1
        ZoneAwarenessEnabled: false
        InstanceType: !Ref esInstanceSize
      ElasticsearchVersion: 5.1
      EBSOptions:
        EBSEnabled: true
        Iops: 0
        VolumeSize: 10
        VolumeType: gp2
      SnapshotOptions:
        AutomatedSnapshotStartHour: 0
      AccessPolicies:
        Version: 2012-10-17
        Statement:
          - Principal:
              AWS: "*"
            Action: "es:*"
            Effect: Allow
            Condition:
              IpAddress:
                aws:SourceIp: "0.0.0.0"
            Resource: "arn:aws:es:*"
      AdvancedOptions:
        rest.action.multi.allow_explicit_index: true
      Tags:
        - Key: Name
          Value: !Join [ "", [ !Ref "AWS::StackName" ,"-es-domain" ] ]

  logConsumerLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdasS3Bucket
        S3Key: !Ref LogConsumeLambdaS3Key
      Environment:
        Variables:
          ES_ENDPOINT: !GetAtt esDomain.DomainEndpoint
      Description: "Alerts CloudWatch Logs to Amazon ES streaming"
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt logConsumerLambdaRole.Arn
      Runtime: nodejs12.x

  logConsumerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: logConsumerLambda
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource: arn:aws:logs:*:*:*
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:GetLogEvents
                  - logs:DescribeLogStreams

              - Effect: Allow
                Resource: arn:aws:es:*:*:*
                Action:
                  - es:ESHttpPost
  logConsumerLambdaInvoke:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt logConsumerLambda.Arn
      Action: "lambda:InvokeFunction"
      Principal: !Join [ "", [ "logs.", !Ref "AWS::Region", ".amazonaws.com" ] ]
      SourceAccount:
        Ref: "AWS::AccountId"
      SourceArn: !GetAtt serviceLambdaLogGroup.Arn

  logFilter:
    DependsOn: logConsumerLambdaInvoke
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      LogGroupName: !Sub /aws/lambda/${lambdaFunctionName}
      FilterPattern: ""
      DestinationArn: !GetAtt logConsumerLambda.Arn

Outputs:
  apiGatewayInvokeURL:
    Value: !Sub https://${apiGateway}.execute-api.${AWS::Region}.amazonaws.com/${apiGatewayStageName}

  servicelambdaArn:
    Value: !GetAtt serviceLambdaFunction.Arn

  KibanaURL:
    Description: Elastic Search Kibana Endpoint.
    Value:
      !Join [ "", [ "https://", !GetAtt esDomain.DomainEndpoint, "/_plugin/kibana/" ] ]

  Region:
    Description: Region of the stack.
    Value:
      Ref: AWS::Region

